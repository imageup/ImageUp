type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | COLON
  | LSQBRACE
  | RSQBRACE
  | LPERCENT
  | RPERCENT
  | SEPARATOR
  | EOF
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | ARROW
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | TRUE
  | FALSE
  | RETURN
  | STOP
  | GO
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | VOID
  | FLOAT
  | TUPLE
  | STRING
  | CHAR
  | MATRIX
  | IMAGE
  | LITERAL of (int)
  | CHARLIT of (char)
  | STRINGLIT of (string)
  | ID of (string)
  | FLIT of (float)
  | BLIT of (bool)

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* COLON *);
  264 (* LSQBRACE *);
  265 (* RSQBRACE *);
  266 (* LPERCENT *);
  267 (* RPERCENT *);
  268 (* SEPARATOR *);
    0 (* EOF *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* MOD *);
  274 (* ASSIGN *);
  275 (* ARROW *);
  276 (* NOT *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQ *);
  281 (* GT *);
  282 (* GEQ *);
  283 (* AND *);
  284 (* OR *);
  285 (* TRUE *);
  286 (* FALSE *);
  287 (* RETURN *);
  288 (* STOP *);
  289 (* GO *);
  290 (* IF *);
  291 (* ELSE *);
  292 (* FOR *);
  293 (* WHILE *);
  294 (* INT *);
  295 (* BOOL *);
  296 (* VOID *);
  297 (* FLOAT *);
  298 (* TUPLE *);
  299 (* STRING *);
  300 (* CHAR *);
  301 (* MATRIX *);
  302 (* IMAGE *);
    0|]

let yytransl_block = [|
  303 (* LITERAL *);
  304 (* CHARLIT *);
  305 (* STRINGLIT *);
  306 (* ID *);
  307 (* FLIT *);
  308 (* BLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\005\000\005\000\009\000\
\009\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\007\000\007\000\003\000\008\000\008\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\012\000\012\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\014\000\014\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\010\000\000\000\001\000\003\000\
\005\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\000\000\002\000\004\000\000\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\002\000\002\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\005\000\007\000\007\000\004\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\069\000\000\000\001\000\000\000\003\000\004\000\
\000\000\000\000\000\000\000\000\000\000\010\000\011\000\013\000\
\012\000\016\000\015\000\014\000\017\000\018\000\000\000\000\000\
\000\000\000\000\021\000\008\000\000\000\000\000\000\000\000\000\
\019\000\009\000\000\000\000\000\020\000\000\000\000\000\022\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\038\000\039\000\000\000\036\000\037\000\023\000\
\000\000\000\000\000\000\054\000\055\000\000\000\000\000\031\000\
\032\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\000\000\026\000\025\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\043\000\044\000\053\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\062\000\
\028\000\000\000\063\000\000\000\029\000"

let yydgoto = "\002\000\
\003\000\004\000\007\000\008\000\012\000\023\000\035\000\038\000\
\013\000\056\000\057\000\063\000\000\000\000\000\000\000"

let yysindex = "\015\000\
\000\000\000\000\000\000\001\000\000\000\006\255\000\000\000\000\
\255\254\176\001\045\255\050\255\049\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\255\176\001\
\046\255\017\255\000\000\000\000\176\001\063\255\060\255\176\001\
\000\000\000\000\021\255\066\255\000\000\052\255\155\255\000\000\
\000\000\155\255\155\255\155\255\076\255\089\255\096\255\103\255\
\104\255\000\000\000\000\000\000\023\255\000\000\000\000\000\000\
\003\000\028\001\077\255\000\000\000\000\103\001\106\255\000\000\
\000\000\155\255\155\255\155\255\176\001\031\255\000\000\155\255\
\155\255\155\255\155\255\155\255\155\255\155\255\155\255\155\255\
\155\255\155\255\155\255\155\255\155\255\155\255\155\255\000\000\
\155\255\000\000\000\000\054\001\111\255\080\001\000\000\107\255\
\142\001\126\001\007\255\007\255\000\000\000\000\000\000\103\001\
\187\001\187\001\079\255\079\255\079\255\079\255\173\001\158\001\
\142\001\140\255\155\255\140\255\109\255\000\000\155\255\080\255\
\031\000\000\000\072\255\142\001\140\255\155\255\113\255\000\000\
\000\000\120\255\000\000\140\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\128\255\000\000\000\000\000\000\129\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\179\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\132\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\231\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\255\000\000\000\000\
\000\000\000\000\132\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\255\057\255\059\000\087\000\000\000\000\000\000\000\018\255\
\227\000\235\000\115\000\143\000\171\000\199\000\002\001\009\001\
\056\255\000\000\000\000\000\000\000\000\000\000\000\000\116\255\
\000\000\000\000\000\000\056\255\000\000\131\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\100\000\000\000\000\000\238\255\000\000\097\000\
\000\000\149\255\217\255\191\255\000\000\000\000\000\000"

let yytablesize = 734
let yytable = "\058\000\
\005\000\093\000\060\000\061\000\062\000\028\000\120\000\009\000\
\122\000\034\000\031\000\034\000\010\000\034\000\059\000\001\000\
\059\000\129\000\056\000\059\000\056\000\076\000\077\000\078\000\
\133\000\059\000\092\000\062\000\094\000\069\000\070\000\059\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\011\000\113\000\095\000\024\000\025\000\039\000\026\000\040\000\
\041\000\060\000\059\000\060\000\130\000\059\000\027\000\033\000\
\029\000\042\000\030\000\059\000\060\000\032\000\036\000\043\000\
\010\000\059\000\060\000\121\000\064\000\096\000\039\000\124\000\
\040\000\090\000\044\000\045\000\046\000\047\000\062\000\048\000\
\049\000\065\000\042\000\074\000\075\000\076\000\077\000\078\000\
\043\000\066\000\050\000\051\000\052\000\053\000\054\000\055\000\
\067\000\068\000\091\000\044\000\045\000\046\000\047\000\115\000\
\048\000\049\000\125\000\117\000\123\000\027\000\127\000\027\000\
\027\000\131\000\132\000\050\000\051\000\052\000\053\000\054\000\
\055\000\027\000\006\000\007\000\033\000\033\000\037\000\027\000\
\059\000\000\000\000\000\000\000\000\000\039\000\000\000\040\000\
\000\000\000\000\027\000\027\000\027\000\027\000\000\000\027\000\
\027\000\042\000\000\000\000\000\039\000\000\000\000\000\043\000\
\000\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
\042\000\000\000\044\000\045\000\046\000\047\000\043\000\048\000\
\049\000\000\000\000\000\000\000\022\000\000\000\022\000\022\000\
\000\000\000\000\050\000\051\000\052\000\053\000\054\000\055\000\
\022\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\000\000\050\000\051\000\052\000\053\000\054\000\055\000\000\000\
\000\000\022\000\022\000\022\000\022\000\000\000\022\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\022\000\000\000\022\000\022\000\040\000\
\000\000\040\000\000\000\000\000\040\000\000\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\071\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\000\000\000\000\000\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\000\000\000\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\126\000\
\000\000\000\000\000\000\000\000\072\000\000\000\000\000\000\000\
\000\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\000\000\006\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\041\000\000\000\041\000\000\000\000\000\
\041\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\041\000\000\000\000\000\000\000\041\000\000\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\042\000\
\000\000\042\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\042\000\000\000\000\000\000\000\
\042\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\047\000\000\000\047\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\048\000\
\000\000\048\000\000\000\000\000\048\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\049\000\000\000\049\000\000\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\050\000\
\000\000\050\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\045\000\000\000\045\000\000\000\000\000\
\045\000\000\000\000\000\046\000\000\000\046\000\045\000\000\000\
\046\000\000\000\000\000\000\000\045\000\000\000\046\000\045\000\
\045\000\000\000\000\000\000\000\046\000\045\000\045\000\046\000\
\046\000\000\000\051\000\000\000\051\000\046\000\046\000\051\000\
\000\000\052\000\000\000\052\000\000\000\051\000\052\000\000\000\
\000\000\000\000\000\000\051\000\052\000\000\000\000\000\000\000\
\000\000\000\000\052\000\000\000\051\000\051\000\088\000\000\000\
\000\000\089\000\000\000\000\000\052\000\000\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\000\000\000\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\114\000\000\000\000\000\072\000\000\000\000\000\000\000\000\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\000\000\000\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\116\000\000\000\000\000\072\000\000\000\000\000\
\000\000\000\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\000\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\072\000\000\000\000\000\000\000\
\000\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\000\000\000\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\072\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\074\000\075\000\076\000\077\000\078\000\000\000\000\000\
\000\000\080\000\081\000\082\000\083\000\084\000\085\000\074\000\
\075\000\076\000\077\000\078\000\000\000\000\000\000\000\000\000\
\000\000\082\000\083\000\084\000\085\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000"

let yycheck = "\039\000\
\000\000\067\000\042\000\043\000\044\000\024\000\114\000\002\001\
\116\000\001\001\029\000\003\001\007\001\032\000\001\001\001\000\
\003\001\125\000\001\001\006\001\003\001\015\001\016\001\017\001\
\132\000\012\001\066\000\067\000\068\000\007\001\008\001\018\001\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\050\001\089\000\069\000\007\001\003\001\002\001\006\001\004\001\
\005\001\001\001\003\001\003\001\126\000\006\001\001\001\004\001\
\019\001\014\001\050\001\012\001\012\001\007\001\050\001\020\001\
\007\001\018\001\018\001\115\000\001\001\047\001\002\001\119\000\
\004\001\005\001\031\001\032\001\033\001\034\001\126\000\036\001\
\037\001\001\001\014\001\013\001\014\001\015\001\016\001\017\001\
\020\001\002\001\047\001\048\001\049\001\050\001\051\001\052\001\
\002\001\002\001\001\001\031\001\032\001\033\001\034\001\001\001\
\036\001\037\001\035\001\009\001\008\001\002\001\047\001\004\001\
\005\001\009\001\003\001\047\001\048\001\049\001\050\001\051\001\
\052\001\014\001\003\001\003\001\001\001\003\001\035\000\020\001\
\040\000\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\031\001\032\001\033\001\034\001\255\255\036\001\
\037\001\014\001\255\255\255\255\002\001\255\255\255\255\020\001\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\014\001\255\255\031\001\032\001\033\001\034\001\020\001\036\001\
\037\001\255\255\255\255\255\255\002\001\255\255\004\001\005\001\
\255\255\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\014\001\255\255\255\255\255\255\255\255\255\255\020\001\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\048\001\049\001\255\255\051\001\052\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\255\255\255\255\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\001\001\
\255\255\255\255\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\050\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\255\255\255\255\255\255\018\001\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\255\255\255\255\255\255\
\018\001\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\001\001\255\255\003\001\012\001\255\255\
\006\001\255\255\255\255\255\255\018\001\255\255\012\001\021\001\
\022\001\255\255\255\255\255\255\018\001\027\001\028\001\021\001\
\022\001\255\255\001\001\255\255\003\001\027\001\028\001\006\001\
\255\255\001\001\255\255\003\001\255\255\012\001\006\001\255\255\
\255\255\255\255\255\255\018\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\027\001\028\001\003\001\255\255\
\255\255\006\001\255\255\255\255\028\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\023\001\024\001\025\001\026\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  COLON\000\
  LSQBRACE\000\
  RSQBRACE\000\
  LPERCENT\000\
  RPERCENT\000\
  SEPARATOR\000\
  EOF\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  ARROW\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  TRUE\000\
  FALSE\000\
  RETURN\000\
  STOP\000\
  GO\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  VOID\000\
  FLOAT\000\
  TUPLE\000\
  STRING\000\
  CHAR\000\
  MATRIX\000\
  IMAGE\000\
  "

let yynames_block = "\
  LITERAL\000\
  CHARLIT\000\
  STRINGLIT\000\
  ID\000\
  FLIT\000\
  BLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 36 "parser.mly"
            ( _1 )
# 460 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
                 ( ([], [])               )
# 466 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 40 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 474 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 41 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 482 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 45 "parser.mly"
     ( { typ = _6;
   fname = _1;
   formals = List.rev _3;
   locals = List.rev _8;
   body = List.rev _9 } )
# 497 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
                  ( [] )
# 503 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 53 "parser.mly"
                  ( _1 )
# 510 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 56 "parser.mly"
                                   ( [(_1, _3)]     )
# 518 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 57 "parser.mly"
                                   ( (_3, _5) :: _1 )
# 527 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
            ( Int   )
# 533 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
            ( Bool  )
# 539 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
            ( Float )
# 545 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
            ( Void  )
# 551 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
            ( Char  )
# 557 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
            ( String)
# 563 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
            ( Tuple )
# 569 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
            ( Matrix)
# 575 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
            ( Image )
# 581 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                     ( [] )
# 587 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 72 "parser.mly"
                     ( _2 :: _1 )
# 595 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 75 "parser.mly"
                     ( (_1, _3) )
# 603 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                   ( [] )
# 609 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                   ( _2 :: _1 )
# 617 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                                            ( Expr _1               )
# 624 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 83 "parser.mly"
                                            ( Return _2             )
# 631 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 84 "parser.mly"
                                            ( Block(List.rev _2)    )
# 638 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 646 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
                                            ( If(_3, _5, _7)        )
# 655 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 665 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                            ( While(_3, _5)         )
# 673 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
                                            ( Break )
# 679 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                                            ( Conti )
# 685 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser.mly"
                  ( Noexpr )
# 691 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                  ( _1 )
# 698 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "parser.mly"
                          ( Literal(_1)            )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 101 "parser.mly"
                          ( Fliteral(_1)           )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 102 "parser.mly"
                          ( BoolLit(_1)            )
# 719 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 103 "parser.mly"
                          ( Cliteral(_1)           )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                          ( Sliteral(_1)           )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                          ( Id(_1)                 )
# 740 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                          ( Binop(_1, Add,   _3)   )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                          ( Binop(_1, Sub,   _3)   )
# 756 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                          ( Binop(_1, Mult,  _3)   )
# 764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                          ( Binop(_1, Div,   _3)   )
# 772 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                          ( Binop(_1, Equal, _3)   )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                          ( Binop(_1, Neq,   _3)   )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                          ( Binop(_1, Less,  _3)   )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                          ( Binop(_1, Leq,   _3)   )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                          ( Binop(_1, Greater, _3) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                          ( Binop(_1, Geq,   _3)   )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                          ( Binop(_1, And,   _3)   )
# 828 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                          ( Binop(_1, Or,    _3)   )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                          ( Binop(_1, Mod,   _3)   )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                          ( Unop(Neg, _2)          )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                          ( Unop(Not, _2)          )
# 858 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                          ( Assign(_1, _3)         )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 122 "parser.mly"
                        ( TypeAsn(_1, _3)        )
# 874 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                          ( _2                     )
# 881 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                          ( CommaCombine(_1, _3)   )
# 889 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                          ( Separator(_1, _3)      )
# 897 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                                  ( BiTuple(_2, _4))
# 905 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                                             ( TriTuple(_2, _4, _6) )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 128 "parser.mly"
                                                           (MatrixAccess(_1, _3, _6))
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 132 "parser.mly"
                                  ( TupleTyp(_1, _3) )
# 931 "parser.ml"
               : 'tuple_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
                  ( [] )
# 937 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 136 "parser.mly"
               ( List.rev _1 )
# 944 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                            ( [_1] )
# 951 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                         ( _3 :: _1 )
# 959 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
